{"version":3,"file":"static/js/981.81dac4d6.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/appBanner/AppBanner.jsx","components/comicsList/ComicsList.jsx","components/pages/ComicsPage.jsx","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './errorMessage.scss';\n\nimport ErrorImage from './img/error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={ErrorImage}\n      className=\"error-message-img\"\n      alt=\"Error message\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img\n        src={avengers}\n        alt=\"Avengers\"\n      />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img\n        src={avengersLogo}\n        alt=\"Avengers logo\"\n      />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport './comicsList.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const {loading, error, getAllComics} = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n\n  const onComicsListLoaded = newComicsList => {\n    let ended = false;\n\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList(comicsList => [...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset => offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <li\n          className=\"comics__item\"\n          key={i}>\n          {/** динамическое формирование пути */}\n          <Link to={`/comics/${item.id}`}>\n            <img\n              src={item.thumbnail}\n              alt={item.title}\n              className=\"comics__item-img\"\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n\n    return <ul className=\"comics__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(comicsList);\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n  const errorMessage = error ? <ErrorMessage /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {spinner}\n      {errorMessage}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading} //  если newItemLoading true кнопка блокируется\n        style={{display: comicsEnded ? 'none' : 'block'}} // если комиксы закончились скрываем кнопку\n        onClick={() => onRequest(offset)} // колбэк обязателен, иначе бесконечный цикл запросов руинит приложение (запросы отправляются до того как компонент смонтирован)\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import AppBanner from '../appBanner/AppBanner';\nimport ComicsList from '../comicsList/ComicsList';\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <AppBanner />\n      <ComicsList />\n    </>\n  );\n};\n\nexport default ComicsPage;\n","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // делаем зарос и помещаем в request\n  // здесь передаем аргументы как для пост-запроса, чтобы уметь делать универсальные запросы\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n      setError(null);\n      setLoading(true); // сначала загрузку в true\n\n      // этот метод будет только отправлять запрос и не будет его обрабатывать при помощи then/catch, поэтому чтобы была возможность выдавать ошибку используем try/catch\n      try {\n        const response = await fetch(url, {method, body, headers}); // получаем ответ сервера в response\n\n        // проверяем ответ, если он не ОК то выбрасываем ошибку для блока catch\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        // .json() считывает тело ответа сервера в формате JSON и возвращает его в виде JavaScript-объекта\n        const data = await response.json(); // в дату помещаем js объект преобразовыннй из JSON-ответа сервера, await ждет завершения обработки\n\n        setLoading(false); // загрузка завершена\n        return data; // возвращаем данные из метода request\n      } catch (e) {\n        setLoading(false); // в любом случае если произошла ошибка то загрузка завершена\n        setError(e.message); // св-во объекта ошибки, выдает сообщение об ошибке (более продвинутый функционал чем просто true/false)\n        throw e; // из catch выкидываем ошибку\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []); // функция по очистке ошибок (наглядны пример был в рандомЧар)\n\n  return {loading, error, request, clearError}; // возвращаем из хука объект с его функционалом дл универсального использования где угодно\n}; // этот хук позволяет нам отправлять любые запросы, обрабатывать результаты и сохранять локальное состояние.\n\n// далее стоит задача связать этот универсальный хук с нашим уже готовым марвелСервисом, который отправляет запросы на опред. адреса и трансформирует данные\n// превратим марвелСервис в хук, который будет использовать внутри себя готовый функционал нашего useHttp, но при этом оставим его в\n// папке сервисов и не будем менять название, т.к. это уже не базовая универсальная операция, а специализированная, которая настроена\n// на работу с конкретным API (marvelAPI).\n","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  const {loading, error, request} = useHttp(); // вытаскиваем сущности функционала из объекта useHttp\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // _ говорит другим программистам что эти данные нельзя менять\n  const _apiKey = 'apikey=48016fbc64705610f2040226da4655f7';\n  const _baseOffSet = 210;\n\n  // делаем функцию асинхронной, поскольку для создания const result нужно дождаться ответа запроса\n  const getAllCharacters = async (offset = _baseOffSet) => {\n    const result = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // сюда приходит ответ от сервера с массивом больших объектов персонажей\n\n    return result.data.results.map(char => _transformCharacter(char)); // получаем массив уже трансформированных объектов\n  };\n\n  const getCharacter = async id => {\n    const result = await request(`${_apiBase}characters/${id}?${_apiKey}`); // сюда помещаем ответ от сервера с большим объектом данных\n\n    // ретерним уже трансформированные, только нужные нам данные\n    return _transformCharacter(result.data.results[0]); // (объект персонажа)\n  };\n\n  const _transformCharacter = char => {\n    // трансформация данных, превращает большой объект полученный с сервера в небольшой объект только с нужными нам данными\n    return {\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 200)}...`\n        : 'There is no description for this character.',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      id: char.id,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return result.data.results.map(comics => _transformComics(comics));\n  };\n\n  const getComic = async id => {\n    const result = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Not available',\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} h.`\n        : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects.language || 'en-us',\n      url: comics.urls[0].url,\n    };\n  };\n\n  // поскольку это кастомный хук из него мы можем вернуть необходимые сущности для дальнейшего использования в других компонентах\n  return {loading, error, getAllCharacters, getCharacter, getAllComics, getComic};\n};\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","src","ErrorImage","className","alt","AppBanner","_jsxs","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","spinner","Spinner","errorMessage","disabled","style","display","onClick","ComicsPage","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","prices","pageCount","language","textObjects","getAllCharacters","results","getCharacter","result","getComic"],"sourceRoot":""}
{"version":3,"file":"static/js/108.771a4060.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/charInfo/CharInfo.jsx","components/charSearchForm/charSearchForm.jsx","components/errorBoundary/ErrorBoundary.jsx","components/pages/MainPage.jsx","utils/upgradeToHttps.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.jsx","utils/setContent.js"],"sourcesContent":["import './errorMessage.scss';\n\nimport ErrorImage from './img/error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={ErrorImage}\n      className=\"error-message-img\"\n      alt=\"Error message\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import {useState, useEffect} from 'react';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const {process, setProcess, getCharacter, clearError} = useMarvelService(); // вытаскиваем нужные сущности из вызова хука useMarvelService\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 30000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = char => {\n    setChar(char);\n    // setLoading(false);  // состояния загрузки и ошибки теперь контролируются из хука useHttp\n  };\n\n  // методы onCharLoading и onError больше не нужны, т.к. состояния загрузки и ошибки теперь контролируются из хука useHttp\n  // const onCharLoading = () => {\n  //   setLoading(true);\n  //   setError(false);\n  //   updateChar();\n  // };\n\n  // const onError = () => {\n  //   setLoading(false);\n  //   setError(true);\n  // };\n\n  const updateChar = () => {\n    clearError();\n\n    const id = Math.floor(Math.random() * (1011500 - 1010900) + 1010900); // диапазон айдишников в базе и выбор случайного\n    getCharacter(id) // из функции getCharacter мы получаем объект с уже трансформированными данными и устанавливаем его в стэйт\n      .then(onCharLoaded) // в .then приходит объект и автоматически подставляется аргументом в указанную ссылочную функцию\n      .then(() => setProcess('confirmed'));\n    // .catch(onError);  // блок catch теперь здесь не нужен, т.к. ошибки обрабатываются в хуке useHttp\n  };\n\n  // const errorMessage = error ? <ErrorMessage /> : null; // выносим сюда сложную логику условного рендеринга\n  // const spinner = loading ? <Spinner /> : null;\n  // const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button\n          className=\"button button__main\"\n          onClick={updateChar}>\n          <div className=\"inner\">try it</div>{' '}\n        </button>\n        <img\n          src={mjolnir}\n          alt=\"mjolnir\"\n          className=\"randomchar__decoration\"\n        />\n      </div>\n    </div>\n  );\n};\n\n// рендерящий компонент, отвечающий только за отображeние, не содержащий никакой логики (вьюшка, вью), только принимает данные и отображает.\n// а все запросы, логика и тд. выше в основном компоненте\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki} = data;\n\n  let imageClassName = 'randomchar__img';\n\n  if (thumbnail === 'https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || \n    thumbnail === 'https://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n    imageClassName += ' object-fit-fill';\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className={imageClassName}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a\n            href={homepage}\n            className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a\n            href={wiki}\n            className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import {useState, useEffect, useRef, useMemo} from 'react';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport './charList.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst setContent = (process, Component, newItemLoading) => {\n  // логика этого компонента отличается от других, поэтому здесь отдельная функция представления контента а не импортированная из utils\n\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    // break;  // если в case есть return то break не обязателен, код дальше по кейсам не пойдет\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />; // если процесс и это дозагрузка персонажей то рендерим просто компонент, если это не дозагрузка новых персонажей то спиннер\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst CharList = props => {\n  const [charList, setCharList] = useState([]);\n  // const [loading, setLoading] = useState(true);  // эти состояния теперь контролируются из useHttp\n  // const [error, setError] = useState(false);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const {process, setProcess, getAllCharacters} = useMarvelService(); // вытаскиваем сущности из объекта вызова useMarvelService\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  // добавлен второй аргумент initial - для определения первичной загрузки (чтобы далее решить проблему разницы в логике загрузки здесь и в useHttp и пропаданием всех персонажей при дозагрузке новых)\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset) // здесь если не передать аргуемент подставится null и метод возьмет оффсет по умолчанию в getAllCharacters\n      .then(onCharListLoaded) // сюда приходит ответ с сервера с 9ю персонажами и подставляется аргументом в onCharListLoaded\n      .then(() => setProcess('confirmed'));\n    // .catch(onError);     // ошибки теперь обрабатываются в useHttp\n  };\n\n  // здесь аргумент ответ сервера с 9* новыми загруженными персонажами\n  const onCharListLoaded = async newCharList => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]); // соединяем старый массив с персонажами с новым и пилим в стэйт\n    setNewItemLoading(false);\n    setOffset(offset => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]); // создаем массив с рефами, он будет лежать в itemRefs.current\n\n  // эта функция сработает нормально в классах, а в функц. комп. push с рефами может дать ошибку. см. нужную функцию в назначении рефов\n  // setRef = ref => {\n  //   this.itemRefs.push(ref);\n  // };\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => {\n      if (item) item.classList.remove('char__item_selected');\n    }); // проверка что элеменнт существует т.к. рефы\n\n    if (itemRefs.current[id]) {\n      itemRefs.current[id].classList.add('char__item_selected');\n      itemRefs.current[id].focus();\n    } // Теперь c проверками код не сломается, даже если itemRefs.current содержит null-значения.\n  };\n\n  // Этот метод создан для оптимизации, чтобы не помещать такую конструкцию в метод render\n  function renderItems(arr) {\n    itemRefs.current = []; // Очищаем массив перед каждым ререндером, так он будт содержать только актуальные значения\n\n    const items = arr.map((item, i) => {\n      let imgStyle = 'char__item';\n      if (\n        item.thumbnail === 'https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || \n        item.thumbnail === 'https://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif'\n      ) {\n        imgStyle += ' object-fit-fill';\n      }\n\n      return (\n        <CSSTransition\n          timeout={500}\n          classNames=\"char__item\"\n          key={item.id}>\n          <li\n            className={imgStyle}\n            key={item.id}\n            tabIndex={0}\n            ref={elem => (itemRefs.current[i] = elem)} // последовательно формируем массив с рефами, elem - ссылка на элемент в DOM\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyDown={e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}>\n            <img\n              src={item.thumbnail}\n              alt={item.name}\n            />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    // А эта конструкция вынесена для центровки спиннера/ошибки\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  // const spinner = loading && !newItemLoading ? <Spinner /> : null; // если идет первая загрузка, но не дозагрузка новых чаровб то показ. спиннер\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const content = !(loading || error) ? items : null;  // в отличие от классов здесь это условие не нужно, т.к. при каждом перерендере все переменные пересоздаются и с этой строкой все персы пропадают в момент дозагрузки  тк на какой-то момент сюда помещается null\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading} //  если newItemLoading true кнопка блокируется\n        style={{display: charEnded ? 'none' : 'block'}} // если персонажи закончились скрываем кнопку\n        onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\n// Этот синтаксис будет нормально работать в функц.комп. при условии что ниже export default ( а не export const CharList = (props) => {...} )\nCharList.propTypes = {\n  onCharSelected: PropTypes.func,\n};\n\nexport default CharList;\n","import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst CharInfo = props => {\n  const [char, setChar] = useState(null);\n\n  const {process, setProcess, getCharacter, clearError} = useMarvelService();\n  const {charId} = props;\n\n  useEffect(() => {\n    updateCharInfo();\n  }, []);\n\n  useEffect(() => {\n    updateCharInfo();\n  }, [charId]);\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateCharInfo = () => {\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed')); // вручную устанавливаем процесс подтверждено в стэйт http.hook, т.к. из-за асинхронности указать это прямо в http.hook как остальные процессы не можем, будет работать неправильно\n  };\n\n  // skeleton = если что-то из состояний есть то ничего не рендерим, если ничего нет то вставляем компонент скелетон\n  // const skeleton = char || loading || error ? null : <Skeleton />;\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const spinner = loading ? <Spinner /> : null;\n  // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n  let imgStyle = {objectFit: 'cover'};\n  if (thumbnail === 'https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || \n    thumbnail === 'https://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n    imgStyle = {objectFit: 'fill'};\n  }\n \n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img\n          style={imgStyle}\n          src={thumbnail}\n          alt={name}\n        />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a\n              href={homepage}\n              className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a\n              href={wiki}\n              className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length === 0 && (\n          <li className=\"char__comics-item\">There is no comics with this character.</li>\n        )}\n        {comics\n          .map((item, i) => {\n            const comicId = `${item.resourceURI.substring(43)}`; // строка из массива данных comics\n\n            return (\n              <li\n                key={i}\n                className=\"char__comics-item\">\n                {/** динамическое формирование пути */}\n                <Link to={`/comics/${comicId}`}>{item.name}</Link>\n              </li>\n            );\n          })\n          .slice(0, 10)}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number, // пропс charId должен соответствовать типу number\n\n  // charId: PropTypes.string  // получаем в консоль предупреждение Warning: Failed prop type: Invalid prop `charId` of type `number` supplied to `CharInfo`, expected `string`.\n};\n\nexport default CharInfo;\n","import {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\nimport * as Yup from 'yup';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n\n  const {process, setProcess, clearError, getCharacterByName} = useMarvelService();\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateChar = name => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const errorMessage =\n    process === 'error' ? (\n      <div className=\"char__search-critical-error\">\n        <ErrorMessage />\n      </div>\n    ) : null;\n\n  const results = !char ? null : char.name ? (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">There is! Visit {char.name} page?</div>\n      <Link to={`/characters/${char.name}`}>\n        <button className=\"button button__secondary\">\n          <div className=\"inner\">to page</div>\n        </button>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">\n      This character was not found. Check the name and try again\n    </div>\n  );\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: '',\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required('Required field!'),\n        })}\n        onSubmit={({charName}) => {\n          updateChar(charName);\n        }}>\n        <Form>\n          <label\n            className=\"char__search-label\"\n            htmlFor=\"charName\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name=\"charName\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n            <button\n              type=\"submit\"\n              className=\"button button__main\"\n              disabled={process === 'loading'}>\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            className=\"char__search-error\"\n            name=\"charName\"\n            component=\"div\"\n          />\n        </Form>\n      </Formik>\n      {errorMessage}\n      {results}\n    </div>\n  );\n};\n\nexport default CharSearchForm;\n","import {Component} from 'react';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  // по факту это такой спец. сетСтэйт, который работает только с ошибкой\n  // static getDerivedStateFromError(error) {\n  //     return {error: true};  {/* возвращает объект, который будет записан в стэйт, только его, никаких сторонних операций */}\n  // }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children; // компонент, который был передан внутрь ErrorBoundary\n  }\n}\n\nexport default ErrorBoundary;\n","import {useState, useCallback} from 'react';\nimport {HelmetProvider, Helmet} from 'react-helmet-async';\n\nimport RandomChar from '../randomChar/RandomChar';\nimport CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport CharSearchForm from '../charSearchForm/charSearchForm';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = useCallback(id => {\n    setChar(id);\n  }, []); // Теперь функция onCharSelected не будет пересоздаваться при каждом ререндере MainPage, а CharList не будет перерендериваться без необходимости.\n\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <meta\n            name=\"description\"\n            content=\"Marvel information portal\"\n          />\n          <title>Marvel information portal</title>\n        </Helmet>\n        <ErrorBoundary>\n          <RandomChar />\n        </ErrorBoundary>\n        <div className=\"char__content\">\n          <ErrorBoundary>\n            <CharList onCharSelected={onCharSelected} />\n          </ErrorBoundary>\n          <div className=\"char__content-side-column\">\n            <ErrorBoundary>\n              <CharInfo charId={selectedChar} />{' '}\n            </ErrorBoundary>\n            <ErrorBoundary>\n              <CharSearchForm />\n            </ErrorBoundary>\n          </div>\n        </div>\n        <img\n          className=\"bg-decoration\"\n          src={decoration}\n          alt=\"vision\"\n        />\n      </HelmetProvider>\n    </>\n  );\n};\n\nexport default MainPage;\n","\r\nfunction upgradeToHttps(url) {\r\n    if (typeof url !== 'string') return url;  // защита от нестроковых типов которые могут случайно попасть и вызвать ошибку\r\n    if (url.startsWith('http://')) {\r\n        return url.replace('http://', 'https://')  // замена http на https\r\n    }\r\n    return url; \r\n}\r\n\r\nexport default upgradeToHttps;","import {useHttp} from '../hooks/http.hook';\nimport upgradeToHttps from '../utils/upgradeToHttps';\n\nconst useMarvelService = () => {\n  const {process, setProcess, request, clearError} = useHttp(); // вытаскиваем сущности функционала из объекта useHttp\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // _ говорит другим программистам что эти данные нельзя менять\n  const _apiKey = 'apikey=48016fbc64705610f2040226da4655f7';\n  const _baseOffSet = 210;\n\n  // делаем функцию асинхронной, поскольку для создания const result нужно дождаться ответа запроса\n  const getAllCharacters = async (offset = _baseOffSet) => {\n    const result = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // сюда приходит ответ от сервера с массивом больших объектов персонажей\n\n    return result.data.results.map(char => _transformCharacter(char)); // получаем массив уже трансформированных объектов\n  };\n\n  const getCharacter = async id => {\n    const result = await request(`${_apiBase}characters/${id}?${_apiKey}`); // сюда помещаем ответ от сервера с большим объектом данных\n\n    if (!result) {\n      console.warn(`⚠ Персонаж с ID ${id} не найден, показываем заглушку`);\n      return {name: 'Unknown Character', description: 'No data available', thumbnail: 'https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'};\n    }\n\n    // ретерним уже трансформированные, только нужные нам данные\n    return _transformCharacter(result.data.results[0]); // (объект персонажа)\n  };\n\n  const _transformCharacter = char => {\n    // трансформация данных, превращает большой объект полученный с сервера в небольшой объект только с нужными нам данными\n    return {\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 200)}...`\n        : 'There is no description for this character.',\n      thumbnail: upgradeToHttps(char.thumbnail.path + '.' + char.thumbnail.extension),  \n      id: char.id,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return result.data.results.map(comics => _transformComics(comics));\n  };\n\n  const getComic = async id => {\n    const result = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Not available',\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} h.`\n        : 'No information about the number of pages',\n      thumbnail: upgradeToHttps(comics.thumbnail.path + '.' + comics.thumbnail.extension),\n      language: comics.textObjects.language || 'en-us',\n      url: comics.urls[0].url,\n    };\n  };\n\n  const getCharacterByName = async charName => {\n    const result = await request(`${_apiBase}characters?name=${charName}&${_apiKey}`);\n\n    if (!result.data.results[0]) {\n      return {};\n    }\n    return _transformCharacter(result.data.results[0]);\n  };\n\n  // поскольку это кастомный хук из него мы можем вернуть необходимые сущности для дальнейшего использования в других компонентах\n  return {\n    process,\n    setProcess,\n    clearError,\n    getAllCharacters,\n    getCharacter,\n    getAllComics,\n    getComic,\n    getCharacterByName,\n  };\n};\n\nexport default useMarvelService;\n","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState('waiting'); // создаем состояние для конечного автомата (стэйт машины)\n\n  // делаем зарос и помещаем в request\n  // здесь передаем аргументы как для пост-запроса, чтобы уметь делать универсальные запросы\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n      setProcess('loading');\n\n      // этот метод будет только отправлять запрос и не будет его обрабатывать при помощи then/catch, поэтому чтобы была возможность выдавать ошибку используем try/catch\n      try {\n        const response = await fetch(url, {method, body, headers}); // получаем ответ сервера в response\n\n        // проверяем ответ, если он не ОК то выбрасываем ошибку для блока catch\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        // .json() считывает тело ответа сервера в формате JSON и возвращает его в виде JavaScript-объекта\n        const data = await response.json(); // в дату помещаем js объект преобразовыннй из JSON-ответа сервера, await ждет завершения обработки\n\n        return data; // возвращаем данные из метода request\n      } catch (e) {\n        setProcess('error');\n        // throw e; // из catch выкидываем ошибку - будет появляться модалка с красными ошибками\n        console.warn('Ошибка запроса', e.message); // Логируем ошибку, но не прерываем выполнение\n        return null; // Возвращаем null вместо выброса ошибки\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess('loading');\n  }, []); // функция по очистке ошибок (наглядны пример был в рандомЧар)\n\n  return {process, setProcess, request, clearError}; // возвращаем из хука объект с его функционалом дл универсального использования где угодно\n}; // этот хук позволяет нам отправлять любые запросы, обрабатывать результаты и сохранять локальное состояние.\n\n// далее стоит задача связать этот универсальный хук с нашим уже готовым марвелСервисом, который отправляет запросы на опред. адреса и трансформирует данные\n// превратим марвелСервис в хук, который будет использовать внутри себя готовый функционал нашего useHttp, но при этом оставим его в\n// папке сервисов и не будем менять название, т.к. это уже не базовая универсальная операция, а специализированная, которая настроена\n// на работу с конкретным API (marvelAPI).\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">Please select a character to see information</p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n  // если логика этой функции повторяется в др. клмпонентах её можно вынести в отдельный файл и импортировать по необходимости\n  // так же можно поместить внутрь http.hook но лучше так не делать т.к. жто уже не совсем относится к логике хука.\n  switch (process) {\n    case 'waiting':\n      return <Skeleton />;\n    // break;  // если в case есть return то break не обязателен, код дальше по кейсам не пойдет\n    case 'loading':\n      return <Spinner />;\n    case 'confirmed':\n      return <Component data={data} />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nexport default setContent;\n"],"names":["ErrorMessage","_jsx","src","ErrorImage","className","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imageClassName","_jsxs","children","href","RandomChar","char","setChar","useState","process","setProcess","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","elem","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","style","display","comics","objectFit","_Fragment","comicId","concat","resourceURI","substring","Link","to","slice","charId","updateCharInfo","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","useCallback","HelmetProvider","Helmet","content","CharList","CharInfo","decoration","url","startsWith","replace","request","useHttp","method","undefined","body","headers","response","fetch","ok","status","json","warn","message","_apiBase","_apiKey","_transformCharacter","upgradeToHttps","path","extension","urls","_transformComics","title","price","prices","pageCount","language","textObjects","result","getAllComics","getComic","Skeleton"],"sourceRoot":""}
{"version":3,"file":"static/js/425.5dba7eaf.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/pages/SingleComicPage.jsx","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './errorMessage.scss';\n\nimport ErrorImage from './img/error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={ErrorImage}\n      className=\"error-message-img\"\n      alt=\"Error message\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import {useState, useEffect} from 'react';\nimport {useParams, useNavigate, Link} from 'react-router-dom';\n\nimport './singleComicPage.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst SingleComicPage = () => {\n  const {comicId} = useParams(); // вытаскиваем comicId из params {comicId: '77343'}\n  const [comic, setComic] = useState(null);\n\n  const {loading, error, getComic} = useMarvelService();\n\n  useEffect(() => {\n    updateComic();\n  }, [comicId]);\n\n  const updateComic = () => {\n    // clearError();\n    getComic(comicId).then(onComicLoaded);\n  };\n\n  const onComicLoaded = comic => {\n    setComic(comic);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\n\n  return (\n    <>\n      {errorMessage}\n      {spinner}\n      {content}\n    </>\n  );\n};\n\nconst View = ({comic}) => {\n  const {title, description, price, pageCount, thumbnail, language} = comic;\n  const navigate = useNavigate();\n\n  // эта проверка не работает на локалхост\n  // const siteOrigin = window.location.origin;  // домен текущего сайта\n\n  // const handleGoBack = () => {\n  //   if (document.referrer.startsWith(siteOrigin)) {  // Возвращаем назад только если реферер с нашего сайта\n  //     navigate(-1);\n  //   } else {            // Иначе ведём на главную\n  //     navigate('/');\n  //   }\n  // }\n\n  return (\n    <div className=\"single-comic\">\n      <img\n        src={thumbnail}\n        alt={title}\n        className=\"single-comic__img\"\n      />\n      <div className=\"single-comic__info\">\n        <h2 className=\"single-comic__name\">{title}</h2>\n        <p className=\"single-comic__descr\">{description}</p>\n        <p className=\"single-comic__descr\">{pageCount}</p>\n        <p className=\"single-comic__descr\">{language}</p>\n        <div className=\"single-comic__price\">{price}</div>\n      </div>\n      <button\n        className=\"single-comic__back\"\n        // onClick={handleGoBack}\n        onClick={() => navigate(-1)}>\n        Back to all\n      </button>\n    </div>\n  );\n};\n\nexport default SingleComicPage;\n","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // делаем зарос и помещаем в request\n  // здесь передаем аргументы как для пост-запроса, чтобы уметь делать универсальные запросы\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n      setError(null);\n      setLoading(true); // сначала загрузку в true\n\n      // этот метод будет только отправлять запрос и не будет его обрабатывать при помощи then/catch, поэтому чтобы была возможность выдавать ошибку используем try/catch\n      try {\n        const response = await fetch(url, {method, body, headers}); // получаем ответ сервера в response\n\n        // проверяем ответ, если он не ОК то выбрасываем ошибку для блока catch\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        // .json() считывает тело ответа сервера в формате JSON и возвращает его в виде JavaScript-объекта\n        const data = await response.json(); // в дату помещаем js объект преобразовыннй из JSON-ответа сервера, await ждет завершения обработки\n\n        setLoading(false); // загрузка завершена\n        return data; // возвращаем данные из метода request\n      } catch (e) {\n        setLoading(false); // в любом случае если произошла ошибка то загрузка завершена\n        setError(e.message); // св-во объекта ошибки, выдает сообщение об ошибке (более продвинутый функционал чем просто true/false)\n        throw e; // из catch выкидываем ошибку\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []); // функция по очистке ошибок (наглядны пример был в рандомЧар)\n\n  return {loading, error, request, clearError}; // возвращаем из хука объект с его функционалом дл универсального использования где угодно\n}; // этот хук позволяет нам отправлять любые запросы, обрабатывать результаты и сохранять локальное состояние.\n\n// далее стоит задача связать этот универсальный хук с нашим уже готовым марвелСервисом, который отправляет запросы на опред. адреса и трансформирует данные\n// превратим марвелСервис в хук, который будет использовать внутри себя готовый функционал нашего useHttp, но при этом оставим его в\n// папке сервисов и не будем менять название, т.к. это уже не базовая универсальная операция, а специализированная, которая настроена\n// на работу с конкретным API (marvelAPI).\n","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  const {loading, error, request} = useHttp(); // вытаскиваем сущности функционала из объекта useHttp\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // _ говорит другим программистам что эти данные нельзя менять\n  const _apiKey = 'apikey=48016fbc64705610f2040226da4655f7';\n  const _baseOffSet = 210;\n\n  // делаем функцию асинхронной, поскольку для создания const result нужно дождаться ответа запроса\n  const getAllCharacters = async (offset = _baseOffSet) => {\n    const result = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // сюда приходит ответ от сервера с массивом больших объектов персонажей\n\n    return result.data.results.map(char => _transformCharacter(char)); // получаем массив уже трансформированных объектов\n  };\n\n  const getCharacter = async id => {\n    const result = await request(`${_apiBase}characters/${id}?${_apiKey}`); // сюда помещаем ответ от сервера с большим объектом данных\n\n    // ретерним уже трансформированные, только нужные нам данные\n    return _transformCharacter(result.data.results[0]); // (объект персонажа)\n  };\n\n  const _transformCharacter = char => {\n    // трансформация данных, превращает большой объект полученный с сервера в небольшой объект только с нужными нам данными\n    return {\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 200)}...`\n        : 'There is no description for this character.',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      id: char.id,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return result.data.results.map(comics => _transformComics(comics));\n  };\n\n  const getComic = async id => {\n    const result = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Not available',\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} h.`\n        : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects.language || 'en-us',\n      url: comics.urls[0].url,\n    };\n  };\n\n  // поскольку это кастомный хук из него мы можем вернуть необходимые сущности для дальнейшего использования в других компонентах\n  return {loading, error, getAllCharacters, getCharacter, getAllComics, getComic};\n};\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","src","ErrorImage","className","alt","View","_ref","comic","title","description","price","pageCount","thumbnail","language","navigate","useNavigate","_jsxs","children","onClick","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","clearError","_apiBase","_apiKey","_transformCharacter","char","name","slice","path","extension","id","homepage","urls","wiki","comics","items","_transformComics","prices","textObjects","getAllCharacters","offset","results","map","getCharacter","result","getAllComics"],"sourceRoot":""}
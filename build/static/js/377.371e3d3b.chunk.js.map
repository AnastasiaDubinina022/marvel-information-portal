{"version":3,"file":"static/js/377.371e3d3b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/errorBoundary/ErrorBoundary.jsx","components/pages/MainPage.jsx","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './errorMessage.scss';\n\nimport ErrorImage from './img/error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={ErrorImage}\n      className=\"error-message-img\"\n      alt=\"Error message\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import {useState, useEffect} from 'react';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const {loading, error, getCharacter} = useMarvelService(); // вытаскиваем нужные сущности из вызова хука useMarvelService\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 30000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = char => {\n    setChar(char);\n    // setLoading(false);  // состояния загрузки и ошибки теперь контролируются из хука useHttp\n  };\n\n  // методы onCharLoading и onError больше не нужны, т.к. состояния загрузки и ошибки теперь контролируются из хука useHttp\n  // const onCharLoading = () => {\n  //   setLoading(true);\n  //   setError(false);\n  //   updateChar();\n  // };\n\n  // const onError = () => {\n  //   setLoading(false);\n  //   setError(true);\n  // };\n\n  const updateChar = () => {\n    const id = Math.floor(Math.random() * (1011500 - 1010900) + 1010900); // диапазон айдишников в базе и выбор случайного\n    getCharacter(id) // из функции getCharacter мы получаем объект с уже трансформированными данными и устанавливаем его в стэйт\n      .then(onCharLoaded); // в .then приходит объект и автоматически подставляется аргументом в указанную ссылочную функцию\n    // .catch(onError);  // блок catch теперь здесь не нужен, т.к. ошибки обрабатываются в хуке useHttp\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null; // выносим сюда сложную логику условного рендеринга\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {/* условно рендерим один из компонентов в зависимости от ситуации. если в переменной null то на странице ничего не отобразится*/}\n      {errorMessage} {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button\n          className=\"button button__main\"\n          onClick={updateChar}>\n          <div className=\"inner\">try it</div>{' '}\n        </button>\n        <img\n          src={mjolnir}\n          alt=\"mjolnir\"\n          className=\"randomchar__decoration\"\n        />\n      </div>\n    </div>\n  );\n};\n\n// рендерящий компонент, отвечающий только за отображeние, не содержащий никакой логики (вьюшка, вью), только принимает данные и отображает.\n// а все запросы, логика и тд. выше в основном компоненте\nconst View = ({char}) => {\n  const {name, description, thumbnail, homepage, wiki} = char;\n\n  let imageClassName = 'randomchar__img';\n\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imageClassName += ' object-fit-contain';\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className={imageClassName}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a\n            href={homepage}\n            className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a\n            href={wiki}\n            className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './charList.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst CharList = props => {\n  const [charList, setCharList] = useState([]);\n  // const [loading, setLoading] = useState(true);  // эти состояния теперь контролируются из useHttp\n  // const [error, setError] = useState(false);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const {loading, error, getAllCharacters} = useMarvelService(); // вытаскиваем сущности из объекта вызова useMarvelService\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  // добавлен второй аргумент initial - для определения первичной загрузки (чтобы далее решить проблему разницы в логике загрузки здесь и в useHttp и пропаданием всех персонажей при дозагрузке новых)\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset) // здесь если не передать аргуемент подставится null и метод возьмет оффсет по умолчанию в getAllCharacters\n      .then(onCharListLoaded); // сюда приходит ответ с сервера с 9ю персонажами и подставляется аргументом в onCharListLoaded\n    // .catch(onError);     // ошибки теперь обрабатываются в useHttp\n  };\n\n  // здесь аргумент ответ сервера с 9* новыми загруженными персонажами\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]); // соединяем старый массив с персонажами с новым и пилим в стэйт\n    setNewItemLoading(false);\n    setOffset(offset => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]); // создаем массив с рефами, он будет лежать в itemRefs.current\n\n  // эта функция сработает нормально в классах, а в функц. комп. push с рефами может дать ошибку. см. нужную функцию в назначении рефов\n  // setRef = ref => {\n  //   this.itemRefs.push(ref);\n  // };\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  // Этот метод создан для оптимизации, чтобы не помещать такую конструкцию в метод render\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = 'char__item';\n      if (\n        item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        imgStyle += ' object-fit-fill';\n      }\n\n      return (\n        <li\n          className={imgStyle}\n          key={item.id}\n          tabIndex={0}\n          ref={elem => (itemRefs.current[i] = elem)} // последовательно формируем массив с рефами, elem - ссылка на элемент в DOM\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyDown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}>\n          <img\n            src={item.thumbnail}\n            alt={item.name}\n          />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n\n    // А эта конструкция вынесена для центровки спиннера/ошибки\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const spinner = loading && !newItemLoading ? <Spinner /> : null; // если идет первая загрузка, но не дозагрузка новых чаровб то показ. спиннер\n  const errorMessage = error ? <ErrorMessage /> : null;\n  // const content = !(loading || error) ? items : null;  // в отличие от классов здесь это условие не нужно, т.к. при каждом перерендере все переменные пересоздаются и с этой строкой все персы пропадают в момент дозагрузки  тк на какой-то момент сюда помещается null\n\n  return (\n    <div className=\"char__list\">\n      {spinner}\n      {errorMessage}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading} //  если newItemLoading true кнопка блокируется\n        style={{display: charEnded ? 'none' : 'block'}} // если персонажи закончились скрываем кнопку\n        onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\n// Этот синтаксис будет нормально работать в функц.комп. при условии что ниже export default ( а не export const CharList = (props) => {...} )\nCharList.propTypes = {\n  onCharSelected: PropTypes.func,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">Please select a character to see information</p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nconst CharInfo = props => {\n  const [char, setChar] = useState(null);\n\n  const {loading, error, getCharacter} = useMarvelService();\n  const {charId} = props;\n\n  useEffect(() => {\n    updateCharInfo();\n  }, []);\n\n  useEffect(() => {\n    updateCharInfo();\n  }, [charId]);\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateCharInfo = () => {\n    if (!charId) {\n      return;\n    }\n\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  // skeleton = если что-то из состояний есть то ничего не рендерим, если ничего нет то вставляем компонент скелетон\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({char}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n  let imgStyle = {objectFit: 'cover'};\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = {objectFit: 'fill'};\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img\n          style={imgStyle}\n          src={thumbnail}\n          alt={name}\n        />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a\n              href={homepage}\n              className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a\n              href={wiki}\n              className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length === 0 && (\n          <li className=\"char__comics-item\">There is no comics with this character.</li>\n        )}\n        {comics\n          .map((item, i) => {\n            const comicId = `${item.resourceURI.substring(43)}`; // строка из массива данных comics\n\n            return (\n              <li\n                key={i}\n                className=\"char__comics-item\">\n                {/** динамическое формирование пути */}\n                <Link to={`/comics/${comicId}`}>{item.name}</Link>\n              </li>\n            );\n          })\n          .slice(0, 10)}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number, // пропс charId должен соответствовать типу number\n\n  // charId: PropTypes.string  // получаем в консоль предупреждение Warning: Failed prop type: Invalid prop `charId` of type `number` supplied to `CharInfo`, expected `string`.\n};\n\nexport default CharInfo;\n","import {Component} from 'react';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  // по факту это такой спец. сетСтэйт, который работает только с ошибкой\n  // static getDerivedStateFromError(error) {\n  //     return {error: true};  {/* возвращает объект, который будет записан в стэйт, только его, никаких сторонних операций */}\n  // }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children; // компонент, который был передан внутрь ErrorBoundary\n  }\n}\n\nexport default ErrorBoundary;\n","import {useState} from 'react';\n\nimport RandomChar from '../randomChar/RandomChar';\nimport CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = id => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />{' '}\n        </ErrorBoundary>\n      </div>\n      <img\n        className=\"bg-decoration\"\n        src={decoration}\n        alt=\"vision\"\n      />\n    </>\n  );\n};\n\nexport default MainPage;\n","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // делаем зарос и помещаем в request\n  // здесь передаем аргументы как для пост-запроса, чтобы уметь делать универсальные запросы\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n      setError(null);\n      setLoading(true); // сначала загрузку в true\n\n      // этот метод будет только отправлять запрос и не будет его обрабатывать при помощи then/catch, поэтому чтобы была возможность выдавать ошибку используем try/catch\n      try {\n        const response = await fetch(url, {method, body, headers}); // получаем ответ сервера в response\n\n        // проверяем ответ, если он не ОК то выбрасываем ошибку для блока catch\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        // .json() считывает тело ответа сервера в формате JSON и возвращает его в виде JavaScript-объекта\n        const data = await response.json(); // в дату помещаем js объект преобразовыннй из JSON-ответа сервера, await ждет завершения обработки\n\n        setLoading(false); // загрузка завершена\n        return data; // возвращаем данные из метода request\n      } catch (e) {\n        setLoading(false); // в любом случае если произошла ошибка то загрузка завершена\n        setError(e.message); // св-во объекта ошибки, выдает сообщение об ошибке (более продвинутый функционал чем просто true/false)\n        throw e; // из catch выкидываем ошибку\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []); // функция по очистке ошибок (наглядны пример был в рандомЧар)\n\n  return {loading, error, request, clearError}; // возвращаем из хука объект с его функционалом дл универсального использования где угодно\n}; // этот хук позволяет нам отправлять любые запросы, обрабатывать результаты и сохранять локальное состояние.\n\n// далее стоит задача связать этот универсальный хук с нашим уже готовым марвелСервисом, который отправляет запросы на опред. адреса и трансформирует данные\n// превратим марвелСервис в хук, который будет использовать внутри себя готовый функционал нашего useHttp, но при этом оставим его в\n// папке сервисов и не будем менять название, т.к. это уже не базовая универсальная операция, а специализированная, которая настроена\n// на работу с конкретным API (marvelAPI).\n","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  const {loading, error, request} = useHttp(); // вытаскиваем сущности функционала из объекта useHttp\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // _ говорит другим программистам что эти данные нельзя менять\n  const _apiKey = 'apikey=48016fbc64705610f2040226da4655f7';\n  const _baseOffSet = 210;\n\n  // делаем функцию асинхронной, поскольку для создания const result нужно дождаться ответа запроса\n  const getAllCharacters = async (offset = _baseOffSet) => {\n    const result = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // сюда приходит ответ от сервера с массивом больших объектов персонажей\n\n    return result.data.results.map(char => _transformCharacter(char)); // получаем массив уже трансформированных объектов\n  };\n\n  const getCharacter = async id => {\n    const result = await request(`${_apiBase}characters/${id}?${_apiKey}`); // сюда помещаем ответ от сервера с большим объектом данных\n\n    // ретерним уже трансформированные, только нужные нам данные\n    return _transformCharacter(result.data.results[0]); // (объект персонажа)\n  };\n\n  const _transformCharacter = char => {\n    // трансформация данных, превращает большой объект полученный с сервера в небольшой объект только с нужными нам данными\n    return {\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 200)}...`\n        : 'There is no description for this character.',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      id: char.id,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return result.data.results.map(comics => _transformComics(comics));\n  };\n\n  const getComic = async id => {\n    const result = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Not available',\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} h.`\n        : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects.language || 'en-us',\n      url: comics.urls[0].url,\n    };\n  };\n\n  // поскольку это кастомный хук из него мы можем вернуть необходимые сущности для дальнейшего использования в других компонентах\n  return {loading, error, getAllCharacters, getCharacter, getAllComics, getComic};\n};\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","src","ErrorImage","className","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imageClassName","_jsxs","children","href","RandomChar","setChar","useState","loading","error","getCharacter","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","tabIndex","ref","elem","onCharSelected","onKeyDown","e","key","renderItems","disabled","style","display","Skeleton","_Fragment","comics","objectFit","comicId","concat","resourceURI","substring","Link","to","slice","charId","updateCharInfo","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","clearError","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","title","price","prices","pageCount","language","textObjects","results","result","getAllComics","getComic"],"sourceRoot":""}
{"version":3,"file":"static/js/787.0d33ee2d.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.jsx","components/errorMessage/ErrorMessage.jsx","components/comicsList/ComicsList.jsx","components/pages/ComicsPage.jsx","utils/upgradeToHttps.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img\n        src={avengers}\n        alt=\"Avengers\"\n      />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img\n        src={avengersLogo}\n        alt=\"Avengers logo\"\n      />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import './errorMessage.scss';\n\nimport ErrorImage from './img/error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={ErrorImage}\n      className=\"error-message-img\"\n      alt=\"Error message\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\n\nimport './comicsList.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst setContent = (process, Component, newItemLoading) => {\n  // логика этого компонента отличается от других, поэтому здесь отдельная функция представления контента а не импортированная из utils\n\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    // break;  // если в case есть return то break не обязателен, код дальше по кейсам не пойдет\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />; // если процесс и это дозагрузка персонажей то рендерим просто компонент, если это не дозагрузка новых персонажей то спиннер\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const {process, setProcess, getAllComics} = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onComicsListLoaded = async newComicsList => {\n    let ended = false;\n\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList(comicsList => [...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset => offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <CSSTransition\n          timeout={500}\n          classNames=\"comics__item\"\n          key={item.id}>\n          <li\n            className=\"comics__item\"\n            key={i}>\n            {/** динамическое формирование пути */}\n            <Link to={`/comics/${item.id}`}>\n              <img\n                src={item.thumbnail}\n                alt={item.title}\n                className=\"comics__item-img\"\n              />\n              <div className=\"comics__item-name\">{item.title}</div>\n              <div className=\"comics__item-price\">{item.price}</div>\n            </Link>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"comics__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  // const items = renderItems(comicsList);\n  // const spinner = loading && !newItemLoading ? <Spinner /> : null;\n  // const errorMessage = error ? <ErrorMessage /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading} //  если newItemLoading true кнопка блокируется\n        style={{display: comicsEnded ? 'none' : 'block'}} // если комиксы закончились скрываем кнопку\n        onClick={() => onRequest(offset)} // колбэк обязателен, иначе бесконечный цикл запросов руинит приложение (запросы отправляются до того как компонент смонтирован)\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import {HelmetProvider, Helmet} from 'react-helmet-async';\n\nimport AppBanner from '../appBanner/AppBanner';\nimport ComicsList from '../comicsList/ComicsList';\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <meta\n            name=\"description\"\n            content=\"Page with list of our comics\"\n          />\n          <title>Comics Page</title>\n        </Helmet>\n        <AppBanner />\n        <ComicsList />\n      </HelmetProvider>\n    </>\n  );\n};\n\nexport default ComicsPage;\n","\r\nfunction upgradeToHttps(url) {\r\n    if (typeof url !== 'string') return url;  // защита от нестроковых типов которые могут случайно попасть и вызвать ошибку\r\n    if (url.startsWith('http://')) {\r\n        return url.replace('http://', 'https://')  // замена http на https\r\n    }\r\n    return url; \r\n}\r\n\r\nexport default upgradeToHttps;","import {useHttp} from '../hooks/http.hook';\nimport upgradeToHttps from '../utils/upgradeToHttps';\n\nconst useMarvelService = () => {\n  const {process, setProcess, request, clearError} = useHttp(); // вытаскиваем сущности функционала из объекта useHttp\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // _ говорит другим программистам что эти данные нельзя менять\n  const _apiKey = 'apikey=48016fbc64705610f2040226da4655f7';\n  const _baseOffSet = 210;\n\n  // делаем функцию асинхронной, поскольку для создания const result нужно дождаться ответа запроса\n  const getAllCharacters = async (offset = _baseOffSet) => {\n    const result = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // сюда приходит ответ от сервера с массивом больших объектов персонажей\n\n    return result.data.results.map(char => _transformCharacter(char)); // получаем массив уже трансформированных объектов\n  };\n\n  const getCharacter = async id => {\n    const result = await request(`${_apiBase}characters/${id}?${_apiKey}`); // сюда помещаем ответ от сервера с большим объектом данных\n\n    if (!result) {\n      console.warn(`⚠ Персонаж с ID ${id} не найден, показываем заглушку`);\n      return {name: 'Unknown Character', description: 'No data available', thumbnail: 'https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'};\n    }\n\n    // ретерним уже трансформированные, только нужные нам данные\n    return _transformCharacter(result.data.results[0]); // (объект персонажа)\n  };\n\n  const _transformCharacter = char => {\n    // трансформация данных, превращает большой объект полученный с сервера в небольшой объект только с нужными нам данными\n    return {\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 200)}...`\n        : 'There is no description for this character.',\n      thumbnail: upgradeToHttps(char.thumbnail.path + '.' + char.thumbnail.extension),  \n      id: char.id,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const result = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return result.data.results.map(comics => _transformComics(comics));\n  };\n\n  const getComic = async id => {\n    const result = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(result.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Not available',\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} h.`\n        : 'No information about the number of pages',\n      thumbnail: upgradeToHttps(comics.thumbnail.path + '.' + comics.thumbnail.extension),\n      language: comics.textObjects.language || 'en-us',\n      url: comics.urls[0].url,\n    };\n  };\n\n  const getCharacterByName = async charName => {\n    const result = await request(`${_apiBase}characters?name=${charName}&${_apiKey}`);\n\n    if (!result.data.results[0]) {\n      return {};\n    }\n    return _transformCharacter(result.data.results[0]);\n  };\n\n  // поскольку это кастомный хук из него мы можем вернуть необходимые сущности для дальнейшего использования в других компонентах\n  return {\n    process,\n    setProcess,\n    clearError,\n    getAllCharacters,\n    getCharacter,\n    getAllComics,\n    getComic,\n    getCharacterByName,\n  };\n};\n\nexport default useMarvelService;\n","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState('waiting'); // создаем состояние для конечного автомата (стэйт машины)\n\n  // делаем зарос и помещаем в request\n  // здесь передаем аргументы как для пост-запроса, чтобы уметь делать универсальные запросы\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n      setProcess('loading');\n\n      // этот метод будет только отправлять запрос и не будет его обрабатывать при помощи then/catch, поэтому чтобы была возможность выдавать ошибку используем try/catch\n      try {\n        const response = await fetch(url, {method, body, headers}); // получаем ответ сервера в response\n\n        // проверяем ответ, если он не ОК то выбрасываем ошибку для блока catch\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        // .json() считывает тело ответа сервера в формате JSON и возвращает его в виде JavaScript-объекта\n        const data = await response.json(); // в дату помещаем js объект преобразовыннй из JSON-ответа сервера, await ждет завершения обработки\n\n        return data; // возвращаем данные из метода request\n      } catch (e) {\n        setProcess('error');\n        // throw e; // из catch выкидываем ошибку - будет появляться модалка с красными ошибками\n        console.warn('Ошибка запроса', e.message); // Логируем ошибку, но не прерываем выполнение\n        return null; // Возвращаем null вместо выброса ошибки\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess('loading');\n  }, []); // функция по очистке ошибок (наглядны пример был в рандомЧар)\n\n  return {process, setProcess, request, clearError}; // возвращаем из хука объект с его функционалом дл универсального использования где угодно\n}; // этот хук позволяет нам отправлять любые запросы, обрабатывать результаты и сохранять локальное состояние.\n\n// далее стоит задача связать этот универсальный хук с нашим уже готовым марвелСервисом, который отправляет запросы на опред. адреса и трансформирует данные\n// превратим марвелСервис в хук, который будет использовать внутри себя готовый функционал нашего useHttp, но при этом оставим его в\n// папке сервисов и не будем менять название, т.к. это уже не базовая универсальная операция, а специализированная, которая настроена\n// на работу с конкретным API (marvelAPI).\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","ErrorImage","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","setProcess","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","async","ended","newComicsList","length","arr","items","map","item","i","CSSTransition","timeout","classNames","Link","to","concat","id","thumbnail","title","price","TransitionGroup","component","renderItems","disabled","style","display","onClick","ComicsPage","_Fragment","HelmetProvider","Helmet","name","content","url","startsWith","replace","request","clearError","useHttp","useCallback","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","console","warn","message","_apiBase","_apiKey","_transformCharacter","char","description","slice","upgradeToHttps","path","extension","homepage","urls","wiki","comics","_transformComics","prices","pageCount","language","textObjects","getAllCharacters","data","results","getCharacter","result","getComic","getCharacterByName","charName"],"sourceRoot":""}